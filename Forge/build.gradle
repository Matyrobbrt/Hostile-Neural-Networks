buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

archivesBaseName = "${mod_name}-forge-${minecraft_version}"

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {

        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
//                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
//                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
//                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly(project(path: ":Common", configuration: "namedElements")) {
        exclude group: 'net.fabricmc'
    }
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly 'io.github.matyrobbrt:eventdispatcher:1.8.0'
    implementation fg.deobf('shadows.placebo:placebo-1.20.1-forge:1.0.0')

    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    runtimeOnly fg.deobf("curse.maven:cloth-config-348521:4573055")
    runtimeOnly fg.deobf("curse.maven:architectury-api-419699:4581905")
    runtimeOnly fg.deobf("curse.maven:powah-rearchitected-633483:4622661")
    runtimeOnly fg.deobf("curse.maven:curios-309927:4583413")
}

tasks.named('compileJava', JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
    //from(project.file("$buildDir/tmp/compileJava/placebo.refmap.json"))
    filesMatching("${mod_id}.mixins.json") {
        expand "refmap_target": "${mod_id}."
    }
}

reobf {
    jarJar
}
tasks.jar.finalizedBy('reobfJar')
tasks.jarJar.finalizedBy('reobfJarJar')

tasks.configureEach {
    if (it.name.startsWith('reobf')) {
        it.extraMappings.from(project.file("$buildDir/tmp/compileJava/compileJava-mappings.tsrg"))
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            groupId = 'shadows.placebo'
            artifactId = "placebo-${minecraft_version}-forge"
            version = project.version
            from components.java
            artifact tasks.jarJar
        }
    }
    repositories {
        mavenLocal()
    }
}